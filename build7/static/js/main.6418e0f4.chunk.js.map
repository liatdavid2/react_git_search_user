{"version":3,"sources":["redux/users/usersActions.js","components/ResultMenu.js","components/Search.js","App.js","serviceWorker.js","redux/users/usersReducer.js","redux/rootReducer.js","redux/store.js","index.js"],"names":["fetchUsersRequest","type","fetchUsersFromGit","selectLogValue","pageNumber","dispatch","axios","get","then","response","data","console","log","payload","fetchUsersSuccess","Promise","all","catch","error","errorMsg","message","fetchUsersFailure","useStyles","makeStyles","theme","root","margin","spacing","width","divider","borderBottom","height","ResultMenu","props","classes","users","List","className","map","item","key","ListItem","ListItemAvatar","Avatar","alt","src","avatar_url","ListItemText","primary","login","secondary","flexGrow","form","background","paper","padding","textAlign","color","searchField","searchButton","headline","footer","position","bottom","Search","useDispatch","useSelector","state","useState","searchValue","setSearchValue","setPageNumber","Grid","container","xs","Paper","TextField","id","onChange","e","handleChangeSelect","target","value","Button","onClick","sm","total_count","items","Pagination","count","page","event","setTimeout","display","App","Boolean","window","location","hostname","match","initialState","loading","usersReducer","action","rootReducer","combineReducers","store","createStore","applyMiddleware","logger","thunk","app","document","getElementById","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6418e0f4.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport const fetchUsersRequest = () => {\r\n    return{\r\n        type:'FETCH_USERS_REQUEST'\r\n    }\r\n}\r\n\r\nconst fetchUsersSuccess = data => {\r\n    return{\r\n        type:'FETCH_USERS_SUCCESS',\r\n        payload:data\r\n    }\r\n}\r\n\r\nconst fetchUsersFailure = error => {\r\n    return{\r\n        type:'FETCH_USERS_FAILURE',\r\n        payload:error\r\n    }\r\n}\r\n\r\nexport const fetchUsersFromGit = (selectLogValue,pageNumber)=>{\r\n    return (dispatch) =>{\r\n        dispatch(fetchUsersRequest)\r\n        axios.get('https://api.github.com/search/users?q='+selectLogValue+'&page='+pageNumber+'&per_page=5')\r\n        .then(response =>{\r\n            \r\n            const data = response.data\r\n            console.log(data)\r\n            dispatch(fetchUsersSuccess(data))\r\n            return Promise.all([data]);\r\n        })\r\n        .catch(error=>{\r\n            const errorMsg = error.message\r\n            dispatch(fetchUsersFailure(errorMsg))\r\n        })\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '100%',\r\n    },\r\n  },\r\n  divider:{\r\n    borderBottom:'1px solid',\r\n    width: '100%',\r\n    height:'70px'\r\n  }\r\n}));\r\n\r\n\r\nexport default function ResultMenu(props) {\r\n  const classes = useStyles();\r\n\r\n\r\n  return props.users ?(\r\n    <List className={classes.root}>\r\n    {props.users && props.users.map((item, key)=> \r\n    <ListItem className={classes.divider} key={key} >\r\n      <ListItemAvatar>\r\n        <Avatar alt=\"Remy Sharp\" src={item.avatar_url} />\r\n      </ListItemAvatar>\r\n      <ListItemText primary={item.login} secondary=\"Jan 9, 2014\" />\r\n\r\n    </ListItem>\r\n    )\r\n    }\r\n  \r\n  </List>\r\n\r\n  ):null;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { fetchUsersFromGit } from '../redux/users/usersActions'\r\nimport { Button } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport ResultMenu from './ResultMenu'\r\nimport './Search.css'\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '25ch',\r\n      flexGrow: 1,\r\n    },\r\n  },\r\n  form: {\r\n    background: 'white'\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    background: '#2a4055',\r\n    color: 'white',\r\n\r\n  },\r\n  searchField: {\r\n    background: '#2a4055',\r\n    color: 'white',\r\n  },\r\n  searchButton: {\r\n    background: '#132231 !important',\r\n    color: 'white',\r\n  },\r\n  headline:{\r\n    textAlign:'center'\r\n  },\r\n  footer: {\r\n    background: '#2a4055',\r\n    color: 'white',\r\n    position: \"fixed\",\r\n    bottom: 0,\r\n    height: '50px',\r\n    width: '100%',\r\n    padding:'5px'\r\n  },\r\n}));\r\n\r\n\r\nexport default function Search() {\r\n  const dispatch = useDispatch()\r\n  const classes = useStyles();\r\n  const users = useSelector(state => state.users)\r\n  const [searchValue, setSearchValue] = useState('');\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n\r\n  const handlePageChange = (event, value) => {\r\n    console.log(value)\r\n    setPageNumber(value);\r\n    setTimeout(dispatch(fetchUsersFromGit(searchValue, value)), 1000);\r\n  };\r\n  function handleChangeSelect(searchValue) {\r\n    console.log(searchValue)\r\n    if (searchValue !== \"\") {\r\n      setSearchValue(searchValue)\r\n\r\n    }\r\n\r\n  }\r\n\r\n  function handleClickGetUsers() {\r\n    if (searchValue !== \"\") {\r\n      dispatch(fetchUsersFromGit(searchValue, pageNumber))\r\n    }\r\n  }\r\n\r\n  return users && users.data ? (\r\n    <Grid container >\r\n      <Grid item xs={12}>\r\n        <Paper className={classes.paper}>\r\n\r\n          <TextField id=\"standard-basic\"\r\n            className={classes.searchField}\r\n            onChange={e => handleChangeSelect(e.target.value)} />\r\n          <Button onClick={e => handleClickGetUsers(e.target.value)}\r\n            className={classes.searchButton}  >Search</Button>\r\n\r\n        </Paper>\r\n      </Grid>\r\n      <Grid item sm={4} xs={0}></Grid>\r\n      <Grid item sm={4} xs={12}>\r\n        {users.data.total_count ?\r\n          <h2 className={classes.headline} >{users.data.total_count + ' users found'}</h2> : null}\r\n        <ResultMenu users={users.data.items} />\r\n      </Grid>\r\n      <Grid item sm={4} xs={0}></Grid>\r\n      <Grid item xs={12}>\r\n        <footer className={classes.footer}>\r\n          <Grid container >\r\n            <Grid item xs={4}></Grid>\r\n            {users.data.total_count ?\r\n              (<Pagination count={100}\r\n                page={pageNumber} onChange={handlePageChange} />) :\r\n              null}\r\n            <Grid item xs={4}></Grid>\r\n          </Grid>\r\n        </footer>\r\n      </Grid>\r\n    </Grid>\r\n\r\n  ) : null;\r\n}\r\n","import React from \"react\";\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport Search from './components/Search'\n\n\nconst drawerWidth = 220;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n  },\n}));\n\n\n\nfunction App(props) {\n  const classes = useStyles();\n\n   return (\n      <div className=\"App\">\n        <div className={classes.root}>\n          <Search/>\n        </div>\n      </div>\n    ) ;\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    loading:false,\r\n    data:[],\r\n    error:''\r\n}\r\n\r\nconst usersReducer = (state = initialState,action) =>{\r\n    switch(action.type){\r\n        case 'FETCH_USERS_REQUEST':return{\r\n            ...state,\r\n            loading:true\r\n        }\r\n\r\n        case 'FETCH_USERS_SUCCESS':return{\r\n            ...state,\r\n            loading:false,\r\n            data:action.payload,\r\n            error:''\r\n        }\r\n\r\n        case 'FETCH_USERS_FAILURE':return{\r\n            ...state,\r\n            loading:false,\r\n            data:[],\r\n            error:action.payload\r\n        }\r\n        default: return state\r\n    }\r\n    \r\n}\r\n\r\nexport default usersReducer","import {combineReducers} from 'redux'\r\nimport usersReducer from './users/usersReducer'\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n\r\n    users:usersReducer\r\n})\r\nexport default rootReducer","import {createStore,applyMiddleware} from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport logger from 'redux-logger'\r\nimport rootReducer from './rootReducer'\r\n\r\n\r\nconst store = createStore(rootReducer,applyMiddleware(logger,thunk))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\n\n\nconst app = document.getElementById('root');\n\n\n\n\n\nReactDOM.render(<Provider store={store}>\n      <App />\n\n</Provider>, app);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}